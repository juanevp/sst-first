{
  "version": 3,
  "sources": ["../../stacks/index.ts", "../../stacks/ApiStack.ts", "../../stacks/StorageStack.ts", "../../stacks/AuthStack.ts", "../../stacks/FrontendStack.ts"],
  "sourcesContent": ["import {App} from \"@serverless-stack/resources\";\nimport {ApiStack} from \"./ApiStack\";\nimport {AuthStack} from \"./AuthStack\";\nimport {FrontendStack} from \"./FrontendStack\";\nimport {StorageStack} from \"./StorageStack\";\n\nexport default function (app: App) {\n    app.setDefaultFunctionProps({\n        runtime: \"nodejs16.x\",\n        srcPath: \"backend\",\n        bundle: {\n            format: \"esm\",\n        },\n    });\n    app.stack(StorageStack, {id: \"storage\"})\n        .stack(ApiStack, {id: \"api\"})\n        .stack(AuthStack, {id: \"auth\"})\n        .stack(FrontendStack);\n}\n", "import {Api, StackContext, use} from \"@serverless-stack/resources\";\r\nimport {StorageStack} from \"./StorageStack\";\r\n\r\nexport function ApiStack({stack}: StackContext) {\r\n    const {table} = use(StorageStack);\r\n\r\n    const api = new Api(stack, \"Api\", {\r\n        cors: true,\r\n        defaults: {\r\n            function: {\r\n                environment: {\r\n                    TABLE_NAME: table.tableName,\r\n                },\r\n            },\r\n            authorizer: \"iam\"\r\n        },\r\n        routes: {\r\n            \"POST   /notes\": \"functions/create.main\",\r\n            \"GET    /notes/{id}\": \"functions/get.main\",\r\n            \"GET    /notes\": \"functions/list.main\",\r\n            \"PUT    /notes/{id}\": \"functions/update.main\",\r\n            \"DELETE /notes/{id}\": \"functions/delete.main\",\r\n        },\r\n    });\r\n\r\n    api.attachPermissions([table]);\r\n    stack.addOutputs({\r\n        ApiEndpoint: api.url,\r\n    });\r\n    return {api};\r\n}\r\n", "import {Bucket, StackContext, Table} from \"@serverless-stack/resources\";\r\n\r\nexport function StorageStack({stack}: StackContext) {\r\n    const table = new Table(stack, \"Notes\", {\r\n        fields: {\r\n            userId: \"string\",\r\n            noteId: \"string\",\r\n        },\r\n        primaryIndex: {\r\n            partitionKey: \"userId\",\r\n            sortKey: \"noteId\",\r\n        },\r\n    });\r\n\r\n    const bucket = new Bucket(stack, \"Uploads\", {\r\n        cors: [\r\n            {\r\n                maxAge: \"1 day\",\r\n                allowedOrigins: [\"*\"],\r\n                allowedHeaders: [\"*\"],\r\n                allowedMethods: [\"GET\", \"PUT\", \"POST\", \"DELETE\", \"HEAD\"],\r\n            },\r\n        ],\r\n    });\r\n\r\n    return {\r\n        bucket,\r\n        table,\r\n    };\r\n}\r\n", "import {Effect, PolicyStatement} from \"aws-cdk-lib/aws-iam\";\r\nimport {Auth, StackContext, use} from \"@serverless-stack/resources\";\r\nimport {StorageStack} from \"./StorageStack\";\r\nimport {ApiStack} from \"./ApiStack\";\r\n\r\nexport function AuthStack({stack}: StackContext) {\r\n    const {bucket} = use(StorageStack);\r\n    const {api} = use(ApiStack);\r\n\r\n    // Create a Cognito User Pool and Identity Pool\r\n    const auth = new Auth(stack, \"Auth\", {\r\n        cdk: {\r\n            userPool: {\r\n                // Users can login with their email and password\r\n                signInAliases: {\r\n                    email: true,\r\n                },\r\n            },\r\n        },\r\n    });\r\n\r\n    auth.attachPermissionsForAuthUsers([\r\n        // Allow access to the API\r\n        api,\r\n        // Policy granting access to a specific folder in the bucket\r\n        new PolicyStatement({\r\n            actions: [\"s3:*\"],\r\n            effect: Effect.ALLOW,\r\n            resources: [bucket.bucketArn + \"/private/${cognito-identity.amazonaws.com:sub}/*\"],\r\n        }),\r\n    ]);\r\n\r\n    // Show the auth resources in the output\r\n    stack.addOutputs({\r\n        Region: stack.region,\r\n        UserPoolId: auth.userPoolId,\r\n        IdentityPoolId: auth.cognitoIdentityPoolId ?? \"\",\r\n        UserPoolClientId: auth.userPoolClientId,\r\n    });\r\n\r\n    return {auth};\r\n}\r\n", "import {ReactStaticSite, StackContext, use} from \"@serverless-stack/resources\";\r\nimport {ApiStack} from \"./ApiStack\";\r\nimport {AuthStack} from \"./AuthStack\";\r\nimport {StorageStack} from \"./StorageStack\";\r\n\r\nexport function FrontendStack({stack, app}: StackContext) {\r\n    const {api} = use(ApiStack);\r\n    const {auth} = use(AuthStack);\r\n    const {bucket} = use(StorageStack);\r\n\r\n    // Define our React app\r\n    const site = new ReactStaticSite(stack, \"ReactSite\", {\r\n        path: \"frontend\",\r\n        // Pass in our environment variables\r\n        environment: {\r\n            REACT_APP_API_URL: api.customDomainUrl || api.url,\r\n            REACT_APP_REGION: app.region,\r\n            REACT_APP_BUCKET: bucket.bucketName,\r\n            REACT_APP_USER_POOL_ID: auth.userPoolId,\r\n            REACT_APP_IDENTITY_POOL_ID: auth.cognitoIdentityPoolId ?? \"\",\r\n            REACT_APP_USER_POOL_CLIENT_ID: auth.userPoolClientId,\r\n        },\r\n    });\r\n\r\n    // Show the url in the output\r\n    stack.addOutputs({\r\n        SiteUrl: site.url,\r\n    });\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
